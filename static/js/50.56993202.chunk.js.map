{"version":3,"file":"static/js/50.56993202.chunk.js","mappings":"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","sources":["webpack://social-network/./src/components/pages/chatPage/chatPage.module.css?8df9","components/pages/chatPage/ChatPage.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"userName\":\"chatPage_userName__xDHkn\",\"photo\":\"chatPage_photo__zw1sX\"};","import { Button } from '@mui/material';\nimport React, { FC, useEffect, useRef, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport {\n  sendMessage,\n  startMessagesListening,\n  stopMessagesListening,\n} from '../../../redux/chat-reducer';\nimport { AppStateType } from '../../../redux/store';\nimport { ChatMessageAPIType } from '../../../types/types';\nimport style from './chatPage.module.css';\n\nconst ChatPage: React.FC = () => {\n  return (\n    <div>\n      <Chat />\n    </div>\n  );\n};\n\nconst Chat: React.FC = () => {\n  const dispatch = useDispatch();\n\n  const status = useSelector((state: AppStateType) => state.chat.status);\n\n  useEffect(() => {\n    // @ts-ignore\n    dispatch(startMessagesListening());\n    return () => {\n      // @ts-ignore\n      dispatch(stopMessagesListening());\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  return (\n    <div>\n      {status === 'error' && (\n        <div>Some error occurred. Please refresh the page</div>\n      )}\n      <>\n        <Messages />\n        <AddMessageForm />\n      </>\n    </div>\n  );\n};\n\nconst Messages: React.FC<{}> = () => {\n  const messages = useSelector((state: AppStateType) => state.chat.messages);\n  const messagesAnchorRef = useRef<HTMLDivElement>(null);\n  const [isAutoScroll, setIsAutoScroll] = useState(true);\n\n  const scrollHandler = (e: React.UIEvent<HTMLDivElement, UIEvent>) => {\n    const element = e.currentTarget;\n    if (\n      Math.abs(\n        element.scrollHeight - element.scrollTop - element.clientHeight,\n      ) < 300\n    ) {\n      !isAutoScroll && setIsAutoScroll(true);\n    } else {\n      isAutoScroll && setIsAutoScroll(false);\n    }\n  };\n\n  useEffect(() => {\n    if (isAutoScroll) {\n      messagesAnchorRef.current?.scrollIntoView({ behavior: 'smooth' });\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [messages]);\n\n  return (\n    <div\n      style={{ height: '400px', overflowY: 'auto' }}\n      onScroll={scrollHandler}\n    >\n      {messages.map((m: any) => (\n        <Message\n          key={m.id}\n          message={m}\n        />\n      ))}\n      <div ref={messagesAnchorRef}></div>\n    </div>\n  );\n};\n\nconst Message: FC<{ message: ChatMessageAPIType }> = React.memo(\n  ({ message }) => {\n    return (\n      <div>\n        <div className={style.userName}>{message.userName}</div>\n        <img\n          className={style.photo}\n          src={message.photo}\n          alt='photos'\n        />\n        <div>{message.message}</div>\n      </div>\n    );\n  },\n);\n\nconst AddMessageForm: React.FC<{}> = () => {\n  const [message, setMessage] = useState('');\n  const dispatch = useDispatch();\n\n  const status = useSelector((state: AppStateType) => state.chat.status);\n\n  const sendMessageHandler = () => {\n    if (!message) {\n      return;\n    }\n    // @ts-ignore\n    dispatch(sendMessage(message));\n    setMessage('');\n  };\n\n  return (\n    <div>\n      <div>\n        <textarea\n          onChange={(e) => setMessage(e.currentTarget.value)}\n          value={message}\n        ></textarea>\n      </div>\n      <div>\n        <Button\n          variant='contained'\n          disabled={status !== 'ready'}\n          onClick={sendMessageHandler}\n        >\n          Send\n        </Button>\n      </div>\n    </div>\n  );\n};\n\nexport default ChatPage;\n"],"names":["Chat","dispatch","useDispatch","status","useSelector","state","chat","useEffect","startMessagesListening","stopMessagesListening","_jsxs","children","_jsx","_Fragment","Messages","AddMessageForm","messages","messagesAnchorRef","useRef","_useState","useState","_useState2","_slicedToArray","isAutoScroll","setIsAutoScroll","_messagesAnchorRef$cu","current","scrollIntoView","behavior","style","height","overflowY","onScroll","e","element","currentTarget","Math","abs","scrollHeight","scrollTop","clientHeight","map","m","Message","message","id","ref","React","_ref","className","userName","src","photo","alt","_useState3","_useState4","setMessage","onChange","value","Button","variant","disabled","onClick","sendMessage"],"sourceRoot":""}