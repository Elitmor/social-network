{"version":3,"file":"static/js/206.f82f4a2a.chunk.js","mappings":"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","sources":["redux/profile-selectors.ts","webpack://social-network/./src/components/profile/myPosts/myPosts.module.css?bbaf","webpack://social-network/./src/components/profile/myPosts/post/post.module.css?a198","components/profile/myPosts/post/Post.tsx","components/profile/myPosts/MyPosts.tsx","components/profile/profile.module.css","webpack://social-network/./src/components/profile/profileInfo/profileDataForm/profileDataForm.module.css?a8f8","components/profile/profileInfo/profileDataForm/ProfileDataForm.tsx","webpack://social-network/./src/components/profile/profileInfo/profileInfo.module.css?01bc","components/profile/profileInfo/profileStatus/ProfileStatus.tsx","components/profile/profileInfo/ProfileInfo.tsx","components/profile/Profile.tsx"],"sourcesContent":["import { createSelector } from 'reselect';\nimport { AppStateType } from './store';\n\nconst getProfilePage = (state: AppStateType) => state.profilePage;\n\nexport const getPost = createSelector(\n  [getProfilePage],\n  (profilePage) => profilePage.posts,\n);\n\nexport const getUserProfile = createSelector(\n  [getProfilePage],\n  (profilePage) => profilePage.profile,\n);\n\nexport const getCurrentStatus = createSelector(\n  [getProfilePage],\n  (profilePage) => profilePage.status,\n);\n","// extracted by mini-css-extract-plugin\nexport default {\"textarea\":\"myPosts_textarea__IEqql\",\"btn\":\"myPosts_btn__vl206\"};","// extracted by mini-css-extract-plugin\nexport default {\"post\":\"post_post__I4HSx\",\"avatar\":\"post_avatar__By7gP\",\"message\":\"post_message__akqbW\",\"like\":\"post_like__2RtdF\"};","import avatar from '../../../../assets/avatar.svg';\nimport style from './post.module.css';\n\ntype PostPropsType = {\n  id: string;\n  message: string;\n  likesCount: number;\n};\n\nexport const Post = (props: PostPropsType) => {\n  return (\n    <div className={style.post}>\n      <img\n        className={style.avatar}\n        src={avatar}\n        alt='avatar'\n      />\n      <span className={style.message}>{props.message}</span>\n      <span className={style.like}>like {props.likesCount}</span>\n    </div>\n  );\n};\n","import SendIcon from '@mui/icons-material/Send';\nimport { Button, TextareaAutosize } from '@mui/material';\nimport { SubmitHandler, useForm } from 'react-hook-form';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { actions } from '../../../redux/profile-reducer';\nimport { getPost } from '../../../redux/profile-selectors';\nimport { AppStateType } from '../../../redux/store';\nimport style from './myPosts.module.css';\nimport { Post } from './post/Post';\n\ninterface PostData {\n  id: string;\n  message: string;\n  likesCount: number;\n}\n\ninterface MyPostsFormData {\n  textarea: string;\n}\n\nexport const MyPosts = () => {\n  const dispatch = useDispatch();\n  const posts = useSelector((state: AppStateType) => getPost(state));\n\n  const { register, handleSubmit, reset } = useForm<MyPostsFormData>();\n\n  const onSubmit: SubmitHandler<MyPostsFormData> = (data) => {\n    dispatch(actions.addPostAC(data.textarea));\n    reset();\n  };\n\n  const postsElements = posts.map((post: PostData) => (\n    <Post\n      key={post.id}\n      id={post.id}\n      message={post.message}\n      likesCount={post.likesCount}\n    />\n  ));\n\n  return (\n    <div className={style.posts}>\n      <form onSubmit={handleSubmit(onSubmit)}>\n        <TextareaAutosize\n          className={style.textarea}\n          placeholder='Enter your message'\n          {...register('textarea')}\n        ></TextareaAutosize>\n        <Button\n          className={style.btn}\n          variant='contained'\n          type='submit'\n          endIcon={<SendIcon />}\n        >\n          Add post\n        </Button>\n      </form>\n      {postsElements}\n    </div>\n  );\n};\n","// extracted by mini-css-extract-plugin\nexport default {};","// extracted by mini-css-extract-plugin\nexport default {\"form\":\"profileDataForm_form__tq4R8\",\"formSection\":\"profileDataForm_formSection__K2+x7\"};","import { Button, TextareaAutosize } from '@mui/material';\nimport { useState } from 'react';\nimport { useForm } from 'react-hook-form';\nimport style from './profileDataForm.module.css';\n\ninterface Contact {\n  [key: string]: string;\n}\n\ninterface ProfileDataFormProps {\n  defaultValues: {\n    fullName: string;\n    lookingForAJob: boolean;\n    lookingForAJobDescription: string;\n    aboutMe: string;\n    contacts: Contact;\n  };\n  onSubmit: (data: Record<string, any>) => Promise<void>;\n}\n\nexport const ProfileDataForm: React.FC<ProfileDataFormProps> = ({\n  defaultValues,\n  onSubmit,\n}) => {\n  const { register, handleSubmit } = useForm({\n    defaultValues: defaultValues,\n  });\n\n  const [errorMessages, setErrorMessages] = useState<string[]>([]);\n\n  const handleFormSubmit = async (data: Record<string, unknown>) => {\n    try {\n      await onSubmit(data);\n    } catch (error: any) {\n      if (\n        error.response &&\n        error.response.data &&\n        error.response.data.messages\n      ) {\n        setErrorMessages(error.response.data.messages);\n      } else {\n        setErrorMessages(['An error occurred. Please try again.']);\n      }\n    }\n  };\n\n  return (\n    <form\n      className={style.form}\n      onSubmit={handleSubmit(handleFormSubmit)}\n    >\n      <div className={style.formSection}>\n        <h4>Full Name</h4>\n        <label>\n          <input\n            placeholder='Full Name'\n            {...register('fullName')}\n          />\n        </label>\n      </div>\n\n      <div className={style.formSection}>\n        <h4>Job Information</h4>\n        <label>\n          <input\n            type='checkbox'\n            {...register('lookingForAJob')}\n          />\n          Looking for a job\n        </label>\n        <label>\n          <TextareaAutosize\n            placeholder='Job Description'\n            {...register('lookingForAJobDescription')}\n          />\n        </label>\n      </div>\n\n      <div className={style.formSection}>\n        <h4>About Me</h4>\n        <label>\n          <input\n            placeholder='About Me'\n            {...register('aboutMe')}\n          />\n        </label>\n      </div>\n\n      <div className={style.formSection}>\n        <h4>Contacts</h4>\n        {Object.keys(defaultValues.contacts).map((key) => (\n          <div key={key}>\n            <label>\n              <b>{key}: </b>\n              <input\n                placeholder={key}\n                {...register(`contacts.${key}`)}\n              />\n            </label>\n          </div>\n        ))}\n      </div>\n\n      {errorMessages.length > 0 && (\n        <div className={style.errorMessages}>\n          {errorMessages.map((message, index) => (\n            <p key={index}>{message}</p>\n          ))}\n        </div>\n      )}\n\n      <Button\n        variant='contained'\n        type='submit'\n      >\n        Save\n      </Button>\n    </form>\n  );\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"profileInfo\":\"profileInfo_profileInfo__sY2db\",\"title\":\"profileInfo_title__YRYI1\",\"inputFile\":\"profileInfo_inputFile__2TmIZ\"};","import { ChangeEventHandler, useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getStatus, updateStatus } from '../../../../redux/profile-reducer';\nimport { getCurrentStatus } from '../../../../redux/profile-selectors';\n\ntype PropsType = {\n  userId: number; // Add the userId prop to fetch the status from the server\n};\n\nexport const ProfileStatus: React.FC<PropsType> = (props) => {\n  const [editMode, setEditMode] = useState(false);\n  const [status, setStatus] = useState('');\n  const dispatch = useDispatch();\n  const currentStatus = useSelector(getCurrentStatus);\n\n  useEffect(() => {\n    if (currentStatus !== status) {\n      setStatus(currentStatus);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [currentStatus]);\n\n  useEffect(() => {\n    // @ts-ignore\n    dispatch(getStatus(props.userId));\n  }, [dispatch, props.userId]);\n\n  const activateEditMode = () => {\n    setEditMode(true);\n  };\n\n  const deactivateEditMode = () => {\n    setEditMode(false);\n    if (status !== currentStatus) {\n      // @ts-ignore\n      dispatch(updateStatus(status));\n    }\n  };\n\n  const onStatusChange: ChangeEventHandler<HTMLInputElement> = (e) => {\n    setStatus(e.currentTarget.value);\n  };\n\n  return (\n    <div>\n      {editMode ? (\n        <input\n          type='text'\n          value={status}\n          onBlur={deactivateEditMode}\n          autoFocus={true}\n          onChange={onStatusChange}\n        />\n      ) : (\n        <div onClick={activateEditMode}>{status || '-------'}</div>\n      )}\n    </div>\n  );\n};\n","import { Button } from '@mui/material';\nimport { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport avatar from '../../../assets/avatar.svg';\nimport { getUserId } from '../../../redux/auth-selectors';\nimport { savePhoto, saveProfile } from '../../../redux/profile-reducer';\nimport { getUserProfile } from '../../../redux/profile-selectors';\nimport { Preloader } from '../../common/preloader/Preloader';\nimport { ProfileDataForm } from './profileDataForm/ProfileDataForm';\nimport style from './profileInfo.module.css';\nimport { ProfileStatus } from './profileStatus/ProfileStatus';\n\ninterface UserProfile {\n  fullName: string;\n  lookingForAJob: boolean;\n  lookingForAJobDescription: string;\n  aboutMe: string;\n  photos: {\n    small: string | null;\n    large: string | null;\n  };\n  contacts: {\n    [key: string]: string;\n  };\n  userId: number;\n}\n\ninterface ProfileInfoProps {\n  isOwner: boolean;\n}\n\nexport const ProfileInfo: React.FC<ProfileInfoProps> = (props) => {\n  const dispatch = useDispatch();\n  const userProfile = useSelector(getUserProfile) as UserProfile | null;\n  const currentUserId = useSelector(getUserId) as number;\n  const [editMode, setEditMode] = useState(false);\n\n  const onEditModeChange = (newEditMode: boolean) => {\n    setEditMode(newEditMode);\n  };\n\n  const onMainPhotoSelected = (e: React.ChangeEvent<HTMLInputElement>) => {\n    if (e.target.files && e.target.files.length) {\n      //@ts-ignore\n      dispatch(savePhoto(e.target.files[0]));\n    }\n  };\n\n  const onSubmit = (data: UserProfile) => {\n    //@ts-ignore\n    dispatch(saveProfile(data));\n    onEditModeChange(false);\n  };\n\n  if (!userProfile) {\n    return <Preloader />;\n  }\n\n  return (\n    <div className={style.profileInfo}>\n      <h3 className={style.title}>My posts</h3>\n      <img\n        className={style.avatar}\n        src={userProfile.photos.small || avatar}\n        alt='avatar'\n      />\n      {props.isOwner ? (\n        <input\n          className={style.inputFile}\n          type='file'\n          onChange={onMainPhotoSelected}\n        />\n      ) : null}\n      {currentUserId === userProfile.userId ? (\n        <ProfileStatus userId={userProfile.userId} />\n      ) : null}\n      {editMode ? (\n        <ProfileDataForm\n          defaultValues={userProfile}\n          //@ts-ignore\n          onSubmit={onSubmit}\n        />\n      ) : (\n        <ProfileData\n          profile={userProfile}\n          isOwner={props.isOwner}\n          goToEditMode={() => {\n            onEditModeChange(true);\n          }}\n        />\n      )}\n    </div>\n  );\n};\n\ninterface ProfileDataProps {\n  isOwner: boolean;\n  goToEditMode: () => void;\n  profile: UserProfile;\n}\n\nconst ProfileData: React.FC<ProfileDataProps> = ({\n  isOwner,\n  goToEditMode,\n  profile,\n}) => {\n  return (\n    <div>\n      {isOwner ? (\n        <Button\n          variant='contained'\n          onClick={goToEditMode}\n        >\n          Edit\n        </Button>\n      ) : null}\n      <div>\n        <b>FullName: </b>\n        {profile.fullName}\n      </div>\n      <div>\n        <b>Looking for a job: </b>\n        {profile.lookingForAJob ? 'yes' : 'no'}\n      </div>\n      <div>\n        <b>Skills: </b>\n        {profile.lookingForAJobDescription}\n      </div>\n      <div>\n        <b>About me: </b>\n        {profile.aboutMe}\n      </div>\n      <div>\n        <b>Contacts</b>\n        {Object.keys(profile.contacts).map((key) => {\n          return (\n            <Contacts\n              key={key}\n              contactTitle={key}\n              contactValue={profile.contacts[key]}\n            />\n          );\n        })}\n      </div>\n    </div>\n  );\n};\n\ninterface ContactsProps {\n  contactTitle: string;\n  contactValue: string;\n}\n\nconst Contacts: React.FC<ContactsProps> = ({ contactTitle, contactValue }) => {\n  return (\n    <div>\n      <b>{contactTitle}: </b>\n      {contactValue}\n    </div>\n  );\n};\n","import { useCallback, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport { getUserId } from '../../redux/auth-selectors';\nimport { getUserProfile } from '../../redux/profile-reducer';\nimport { MyPosts } from './myPosts/MyPosts';\nimport style from './profile.module.css';\nimport { ProfileInfo } from './profileInfo/ProfileInfo';\n\nconst Profile = () => {\n  const dispatch = useDispatch();\n  const { userId } = useParams();\n  const navigate = useNavigate();\n  const authorizedUserId = useSelector(getUserId);\n\n  const redirectToLogin = useCallback(() => {\n    navigate('/login');\n  }, [navigate]);\n\n  useEffect(() => {\n    const profileUserId = userId || authorizedUserId;\n    if (profileUserId) {\n      //@ts-ignore\n      dispatch(getUserProfile(profileUserId));\n    } else {\n      redirectToLogin();\n    }\n  }, [userId, authorizedUserId, dispatch, redirectToLogin]);\n\n  return (\n    <div className={style.profile}>\n      <ProfileInfo isOwner={!userId} />\n      <MyPosts />\n    </div>\n  );\n};\n\nexport default Profile;\n"],"names":["getProfilePage","state","profilePage","getPost","createSelector","posts","getUserProfile","profile","getCurrentStatus","status","Post","props","_jsxs","className","style","children","_jsx","src","avatar","alt","message","likesCount","MyPosts","dispatch","useDispatch","useSelector","_useForm","useForm","register","handleSubmit","reset","postsElements","map","post","id","onSubmit","data","actions","textarea","TextareaAutosize","_objectSpread","placeholder","Button","variant","type","endIcon","SendIcon","ProfileDataForm","_ref","defaultValues","_useState","useState","_useState2","_slicedToArray","errorMessages","setErrorMessages","handleFormSubmit","_ref2","_asyncToGenerator","_regeneratorRuntime","mark","_callee","wrap","_context","prev","next","t0","response","messages","stop","_x","apply","arguments","Object","keys","contacts","key","concat","length","index","ProfileStatus","editMode","setEditMode","_useState3","_useState4","setStatus","currentStatus","useEffect","getStatus","userId","value","onBlur","updateStatus","autoFocus","onChange","e","currentTarget","onClick","ProfileInfo","userProfile","currentUserId","getUserId","onEditModeChange","newEditMode","photos","small","isOwner","target","files","savePhoto","saveProfile","ProfileData","goToEditMode","Preloader","fullName","lookingForAJob","lookingForAJobDescription","aboutMe","Contacts","contactTitle","contactValue","useParams","navigate","useNavigate","authorizedUserId","redirectToLogin","useCallback","profileUserId"],"sourceRoot":""}